---
const { code, lang, meta } = Astro.props;
import { hastToHtml, codeToHast } from "shiki";
import { transformerNotationHighlight } from "@shikijs/transformers";
import { parseKeyValuePairs } from "../../../utils.js";
const theme = "catppuccin-mocha";
import CopyButton from "./CopyButton.astro";

// Parse Metadata and Change Styling
var metas = parseKeyValuePairs(meta);

// File Name
const fileName = metas["file"] ?? "";

// Output Lines
let codeLines = code;
let outputLines = null;

// Process if output lines are needed
const n = parseInt(metas["output"]) ?? 0;
if (n > 0) {
  const lines = code.split("\n");
  const splitIndex = lines.length - n;
  codeLines = lines.slice(0, splitIndex).join("\n");
  outputLines = lines.slice(splitIndex).join("\n");
}

// Generate Intermediate Representation
let hastCode = await codeToHast(codeLines, {
  lang,
  theme,
  transformers: [transformerNotationHighlight()],
});

if (n > 0) {
  // Apply Output Lines
  let hastOutput = await codeToHast(outputLines, {
    lang: "plain",
    theme,
  });

  // 1) Helper to find <pre> in a HAST
  function findPreNode(hast) {
    // If the top-level is already <pre>
    if (hast?.tagName === "pre") {
      return hast;
    }
    // If it's a root node with children, search them
    if (hast?.type === "root" && Array.isArray(hast.children)) {
      return hast.children.find((node) => node.tagName === "pre");
    }
    return null;
  }

  const preMain = findPreNode(hastCode);
  const preOutput = findPreNode(hastOutput);

  // Only merge if both exist
  if (preMain && preOutput) {
    // Insert <hr> in preMain
    preMain.children.push({
      type: "element",
      tagName: "hr",
      children: [],
    });

    // Add a custom "output" class to each line in preOutput
    for (const child of preOutput.children) {
      child.properties = child.properties || {};
      child.properties.className = child.properties.className || [];
      child.properties.className.push("output");
    }

    // Append them to preMain
    preMain.children.push(...preOutput.children);
  }
}

const highlightedCode = hastToHtml(hastCode);
---

<div class="code-block p-3 mb-10 rounded-lg bg-codeBackground shadow-md font-mono">
  <div class="grid grid-cols-[1fr_4fr_1fr] text-white mb-1">
    <div class="flex flex-row space-x-2 items-center">
      <div class="rounded-full bg-[#FF605C] h-[0.75rem] aspect-square"></div>
      <div class="rounded-full bg-[#FFBD44] h-[0.75rem] aspect-square"></div>
      <div class="rounded-full bg-[#00CA4E] h-[0.75rem] aspect-square"></div>
    </div>
    <div class="font-mono text-sm text-center">{fileName}</div>
    <div class="flex justify-end">
      <CopyButton code={codeLines} />
    </div>
  </div>
  <div class="not-prose text-[0.75rem] md:text-[0.9rem] leading-[1.5]" set:html={highlightedCode} />
</div>
